#!/usr/bin/env ruby

# This script migrates CAP (Child Account Policy) data from properties to separate indexed columns.

require 'ruby-progressbar'
require_relative '../../../dashboard/config/environment'

# @see https://github.com/code-dot-org/code-dot-org/pull/52244
CAP_RELEASE_DATE = DateTime.parse('2023-06-09')

users = User.where(current_sign_in_at: CAP_RELEASE_DATE..)
total_updated = 0

progress_bar_title = proc {|num_updates = 0| "Processed[%c/%C]: |%W| Updated: #{total_updated += num_updates} %a"}
progress_bar = ProgressBar.create(total: users.count, format: progress_bar_title.call)

failed_user_ids = []
batch_size = 1000

users.in_batches(of: batch_size) do |users_batch|
  users_batch.where(cap_state: nil).where("properties->>'$.child_account_compliance_state' IS NOT NULL").in_batches do |cap_users_batch|
    cap_user_ids = cap_users_batch.ids

    User.where(id: cap_user_ids).update_all <<~SQL.strip
      cap_state = IF(properties->>'$.child_account_compliance_state' = 's', 'l', properties->>'$.child_account_compliance_state'),
      cap_state_date = CAST(properties->>'$.child_account_compliance_state_last_updated' AS DATETIME)
    SQL

    progress_bar.format progress_bar_title.call(cap_user_ids.size)
  rescue StandardError => exception
    failed_user_ids += cap_user_ids
    progress_bar.log "Error updating users: #{exception.inspect}".red
  end

  progress_bar.progress += batch_size
rescue ProgressBar::InvalidProgressError
  progress_bar.finish
end

puts "Failed to update #{failed_user_ids.size} users: #{failed_user_ids.inspect}".yellow unless failed_user_ids.empty?
